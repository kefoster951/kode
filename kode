#!/usr/bin/env bash

#**************************************************#
#                                                  #
#   kode v4.5                                      #
#   A bash script to                               #
#   -> Add shebang                                 #
#   -> Add info header                             #
#   -> Add code template (can be toggled)          #
#   -> Make code executable                        #
#   -> Update Last modified column of info header  #
#                                                  #
#   Author : https://github.com/laraib07           #
#                                                  #
#   Supported languages :                          #
#   bash, c, c++, c#, css, java,                   #
#   javascript, perl, php, python,                 #
#   ruby, rust, swift, typescript.                 #
#                                                  #
#**************************************************#


#colors and variables
R='\033[1;31m'
G='\033[1;32m'
W='\033[1;37m'
OFF='\033[0m'
DATE=$(date '+%a %d %b %y  %R:%S')
FORMAT="%-16s %-30s %s\n"
CODE_TEMPLATE="$HOME/.kode"
CONFIG_FILE="$HOME/.kode/kodeconfig"


# checking config file [ FAILSAFE ]
if ! [[ -f "$CONFIG_FILE" ]]
then
    mkdir "$HOME"/.kode &> /dev/null
    touch "$CONFIG_FILE"
    printf "AUTHOR=\"Set name with -a\"\n" > "$CONFIG_FILE"
    printf "TXT_EDITOR=\${VISUAL:-\"\${EDITOR:-vi}\"}\n" >> "$CONFIG_FILE"
    printf "INSERT_CODE=true\n" >> "$CONFIG_FILE"
fi

# sourcing config file
source "$CONFIG_FILE"


header_template()
{
    printf "************************************************#\n"
    printf "#%-49s#\n"
    printf "$FORMAT" "#  Project title :"  "$1" '#'
    printf "$FORMAT" "#  Author        :"  "${AUTHOR}" '#'
    printf "$FORMAT" "#  Date          :"  "${DATE}" '#'
    printf "$FORMAT" "#  Last modified :"  "${DATE}" '#'
    printf "$FORMAT" "#  Notes         :"  "" '#'
    printf "$FORMAT" "#  Description   :"  "" '#'
    printf "#%-49s#\n"
    printf "#************************************************"

}


insert_code_template()
{
    # inserting code template
    case "$1" in
        *.c )
            cat "$CODE_TEMPLATE"/c.temp >> "$1" ;;

        *.cpp )
            cat "$CODE_TEMPLATE"/cpp.temp >> "$1" ;;

        *.cs )
            cat "$CODE_TEMPLATE"/cs.temp >> "$1" ;;

        *.java )
            cat "$CODE_TEMPLATE"/java.temp >> "$1" ;;

        *.rs )
            cat "$CODE_TEMPLATE"/rs.temp >> "$1" ;;
    esac
}


insert_shebang_header()
{
    # checking if shebang required
    if [[ "$1" =~ \.(pl|py|rb|sh)$ ]]
    then
        # checking environment
        case "$1" in
            *.pl ) environment=perl ;;
            *.py ) environment=python3 ;;
            *.rb ) environment=ruby ;;
            *.sh ) environment=bash ;;
        esac

        # appending shebang
        printf "#!$(which env) "$environment"\n\n" >> "$1"
        # appending header template
        printf "#*$(header_template "$1")*#\n\n" >> "$1"

    elif [[ "$1" =~ \.(c|cpp|cs|css|java|js|php|rs|swift|ts)$ ]]
    then
        # shebang not requied
        # appending header template only
        printf "/*$(header_template "$1")*/\n\n" >> "$1"

        if [[ "$INSERT_CODE" == "true" ]]
        then
            insert_code_template "$1"
        fi
    fi
}


update_last_modified()
{
    replace_with=$(printf "$FORMAT"  "#  Last modified :" "${DATE}" '#')

    # update first occurrence of last modified
    sed -i "0,/^#  Last modified.*/{s//${replace_with}/}" "$1"
}


toggle_code_insertion()
{
    # if INSERT_CODE is true then assign it false
    if [[ "$INSERT_CODE" == "true" ]]
    then
        sed -i "s/true/false/g" "$CONFIG_FILE"
        printf  "code insertion ${R}disabled.\n"

    elif [[ "$INSERT_CODE" == "false" ]]
    then
        sed -i "s/false/true/g" "$CONFIG_FILE"
        printf  "code insertion ${G}enabled.\n"
    fi
}


file_exists()
{
    md5sum1="$(printf "%.33s" $(md5sum "$1"))"

    "$TXT_EDITOR" "$1"

    md5sum2="$(printf "%.33s" $(md5sum "$1"))"

    if [[ "$new" == "true"  && "$md5sum1" == "$md5sum2" ]]
    then
        rm -f "$1"

    elif [[ "$md5sum1" != "$md5sum2" ]]
    then
        update_last_modified "$1"
    fi
}


is_new_file()
{
    touch "$1"
    chmod u+x "$1"             # making file executable

    insert_shebang_header "$1" # inserting shebang and header

    new=true
    file_exists "$1"
}


help()
{
    printf  "${OFF}Usage : ${W}kode${OFF} [-hvt] [-a name] [file...]\n"
    printf  " -h    --help                     Print help\n"
    printf  " -v    --version                  Print version\n"
    printf  " -a    --set-author               Set author name\n"
    printf  " -t    --toggle-code-insertion    toggle code insertion\n"
}


version()
{
    printf "${OFF}kode v4.5\n"
    printf "A bash script to\n"
    printf " -> Add shebang\n"
    printf " -> Add info header\n"
    printf " -> Add code template (can be toggled)\n"
    printf " -> Make code executable\n"
    printf " -> Update Last modified column in info header\n\n"
    printf "Author : https://github.com/laraib07\n\n"
    printf "Supported languages : \n"
    printf "bash, c, c++, c#, css, java, javascript, perl,\n"
    printf "php, python, ruby, rust, swift, typescript.\n"
}


# if no argument provided
if [[ -z "$1" ]]
then
    printf "No argument provided.\n"
    printf "Provide atleast one argument.\n"
fi


# Driver Code
while [[ -n "$1" ]]
do
    case "$1" in
        "-h" | "--help" )
            help ;;

        "-v" | "--version" )
            version ;;

        "-a" | "--set-author" )
            if [[ -n "$2" ]]
            then
                sed -i "0,/^AUTHOR.*/{s//AUTHOR=$2/}" "$CONFIG_FILE"
                printf "Author name set to $2.\n" 
            else
                printf "Usage : kode -a name\n"
            fi
            shift
            ;;

        "-t" | "--toggle-code-insertion" )
            toggle_code_insertion ;;

        [!-]* )
            if [[ -f "$1" ]]; then
                file_exists "$1"
            else
                is_new_file  "$1"
            fi
            ;;

        * )
            printf " $1 is invalid option\n" 
            printf "Try \"-h\" or \"--help\" for help!\n"
            ;;
    esac
    shift
done

exit 0
